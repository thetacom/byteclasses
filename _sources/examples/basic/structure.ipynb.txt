{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Structure Collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import ClassVar\n",
    "from byteclasses import ByteOrder\n",
    "from byteclasses.types.collections import FixedSizeCollection, structure, member\n",
    "from byteclasses.types.primitives.characters import UChar\n",
    "from byteclasses.types.primitives.generics import Byte\n",
    "from byteclasses.types.primitives.integers import Int8, UInt8, UInt16, UInt32\n",
    "from byteclasses.types.primitives.floats import Float32"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Basic Structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BasicStructure(var1=UInt8(0), var2=UInt16(0)) 4 bytearray(b'\\x00\\x00\\x00\\x00')\n"
     ]
    }
   ],
   "source": [
    "@structure\n",
    "class BasicStructure:\n",
    "    \"\"\"A basic structure byteclass.\"\"\"\n",
    "\n",
    "    var1: UInt8 = UInt8()\n",
    "    var2: UInt16 = UInt16()\n",
    "\n",
    "\n",
    "bs = BasicStructure()\n",
    "print(bs, len(bs), bs.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Packed Basic Structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PackedStructure(var1=UInt8(0), var2=UInt16(0)) 3 bytearray(b'\\x00\\x00\\x00')\n"
     ]
    }
   ],
   "source": [
    "@structure(packed=True)\n",
    "class PackedStructure:\n",
    "    \"\"\"A Packed structure byteclass.\"\"\"\n",
    "\n",
    "    var1: UInt8 = UInt8()\n",
    "    var2: UInt16 = UInt16()\n",
    "\n",
    "\n",
    "ps = PackedStructure()\n",
    "print(ps, len(ps), ps.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simple Structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n",
      "SimpleStruct(a=UInt8(0), b=UInt16(0), c=UChar('\\x00'), d=Float32(0.0), e=UInt8(0))\n",
      "bytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n"
     ]
    }
   ],
   "source": [
    "@structure(byte_order=b\"!\")\n",
    "class SimpleStruct():\n",
    "    a:UInt8\n",
    "    b:UInt16\n",
    "    c:UChar\n",
    "    d:Float32\n",
    "    e: UInt8\n",
    "ss1: FixedSizeCollection = SimpleStruct()\n",
    "print(len(ss1))\n",
    "print(ss1)\n",
    "print(ss1.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Direct data access"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xcd\\xcc\\x8c?\\x00')\n",
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "ss1.data = b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xcd\\xcc\\x8c?\\x00\"\n",
    "print(ss1.data)\n",
    "print(ss1.a)\n",
    "print(ss1.b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SimpleStruct(a=UInt8(1), b=UInt16(512), c=UInt8(3), d=Float32(4.600743118071239e-41), e=UInt8(0))\n",
      "bytearray(b'\\x01\\x00\\x02\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x80@\\x00')\n"
     ]
    }
   ],
   "source": [
    "ss2 = SimpleStruct(a=UInt8(1), b=UInt16(2), c=UInt8(3), d=Float32(4))\n",
    "print(ss2)\n",
    "print(ss2.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Member Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NET\n",
      "b'\\x01'\n",
      "bytearray(b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xcd\\xcc\\x8c?\\x00')\n",
      "b'\\x00\\x02'\n",
      "bytearray(b'\\x01\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\xcd\\xcc\\x8c?\\x00')\n",
      "b'c'\n",
      "bytearray(b'\\x01\\x00\\x00\\x02c\\x00\\x00\\x00\\xcd\\xcc\\x8c?\\x00')\n",
      "b'@\\x80\\x00\\x00'\n",
      "bytearray(b'\\x01\\x00\\x00\\x02c\\x00\\x00\\x00@\\x80\\x00\\x00\\x00')\n"
     ]
    }
   ],
   "source": [
    "print(ss1.a.endianness)\n",
    "ss1.a = 1\n",
    "print(ss1.a.data)\n",
    "print(ss1.data)\n",
    "ss1.b = 2\n",
    "print(ss1.b.data)\n",
    "print(ss1.data)\n",
    "ss1.c = \"c\"\n",
    "print(ss1.c.data)\n",
    "print(ss1.data)\n",
    "ss1.d = 4\n",
    "print(ss1.d.data)\n",
    "print(ss1.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Index Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bytearray(b'\\x01\\x06\\x07\\x08c\\x00\\x00\\x00@\\x80\\x00\\x00\\x00')\n",
      "SimpleStruct(a=UInt8(1), b=UInt16(1800), c=UChar('c'), d=Float32(4.0), e=UInt8(0))\n"
     ]
    }
   ],
   "source": [
    "ss1[1] = 6\n",
    "ss1[2] = 7\n",
    "ss1[3] = 8\n",
    "print(ss1.data)\n",
    "print(ss1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nested Collections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "@structure\n",
    "class InnerStruct:\n",
    "    var0: ClassVar[int] = 23\n",
    "    var2: Byte = member(default_factory=Byte)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "@structure(byte_order=ByteOrder.NATIVE, packed=True)\n",
    "class OuterStruct:\n",
    "    var3: ClassVar[int] = 23\n",
    "    var4: Int8 = member(default_factory=Int8)\n",
    "    var5: UInt32 = member(default=UInt32(65535))\n",
    "    var6: Float32 = Float32(1.1)\n",
    "    var7: InnerStruct = member(default_factory=InnerStruct)\n",
    "\n",
    "    def test(self):\n",
    "        print(\"test\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OuterStruct(var4=Int8(0), var5=UInt32(65535), var6=Float32(1.100000023841858), var7=InnerStruct(var2=Byte(data=b'\\x00', byte_order=b'@')))\n",
      "InnerStruct(var2=Byte(data=b'\\x00', byte_order=b'@'))\n",
      "b'\\x00\\xff\\xff\\x00\\x00\\xcd\\xcc\\x8c?\\x00'\n"
     ]
    }
   ],
   "source": [
    "test = OuterStruct()\n",
    "print(test)\n",
    "print(test.var7)\n",
    "print(bytes(test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Member Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OuterStruct(var4=Int8(1), var5=UInt32(65535), var6=Float32(1.100000023841858), var7=InnerStruct(var2=Byte(data=b'\\x00', byte_order=b'@')))\n",
      "bytearray(b'\\x01\\xff\\xff\\x00\\x00\\xcd\\xcc\\x8c?\\x00')\n"
     ]
    }
   ],
   "source": [
    "test.var4 = 1\n",
    "print(test)\n",
    "print(test.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Attribute Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OuterStruct(var4=Int8(-7), var5=UInt32(4126603256), var6=Float32(-2.4060893954673178e+30), var7=InnerStruct(var2=Byte(data=b'\\xf0', byte_order=b'@')))\n",
      "bytearray(b'\\xf9\\xf8\\xf7\\xf6\\xf5\\xf4\\xf3\\xf2\\xf1\\xf0')\n"
     ]
    }
   ],
   "source": [
    "test.data = b\"\\xf9\\xf8\\xf7\\xf6\\xf5\\xf4\\xf3\\xf2\\xf1\\xf0\"\n",
    "print(test)\n",
    "print(test.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Slice Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OuterStruct(var4=Int8(-7), var5=UInt32(134744312), var6=Float32(-2.4060893954673178e+30), var7=InnerStruct(var2=Byte(data=b'\\xf0', byte_order=b'@')))\n",
      "bytearray(b'\\xf9\\xf8\\x08\\x08\\x08\\xf4\\xf3\\xf2\\xf1\\xf0')\n"
     ]
    }
   ],
   "source": [
    "test[2:5] = b\"\\x08\"\n",
    "print(test)\n",
    "print(test.data)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.14 ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "557d07237cea0a23e1b53fe2d85e0da343a1f271fee6abb399e030b4f4b9db4a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
