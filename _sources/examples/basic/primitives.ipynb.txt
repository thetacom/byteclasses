{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fixed Size Primitive Examples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing fixed length primitive types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from byteclasses.types.primitives.floats import Half, Float, Float16, Float32, Float64, Double\n",
    "from byteclasses.types.primitives.integers import Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, Byte, Short, UShort, Long, LongLong, ULong, ULongLong, SChar, UChar, Int, UInt, Word, DWord"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fixed Size Primitive Instantiation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import chain\n",
    "\n",
    "fixed_integer_types = [Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, Long, ULong]\n",
    "fixed_integer_type_aliases = [Byte, SChar, UChar, Short, UShort, Word, Int, UInt, DWord, LongLong, ULongLong]\n",
    "fixed_float_types = [Float16, Float32, Float64]\n",
    "fixed_float_type_aliases = [Half, Float, Double]\n",
    "\n",
    "my_ints = []\n",
    "for i, type_cls in enumerate(chain(fixed_integer_types, fixed_integer_type_aliases)):\n",
    "    my_ints.append(type_cls(i))\n",
    "\n",
    "my_floats = []\n",
    "for i, type_cls in enumerate(chain(fixed_float_types, fixed_float_type_aliases)):\n",
    "    my_floats.append(type_cls(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-style: italic\">                                                Fixed Size Integers                                                </span>\n",
       "┏━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\">       Repr </span>┃<span style=\"font-weight: bold\"> Variable </span>┃<span style=\"font-weight: bold\"> Type Length </span>┃<span style=\"font-weight: bold\"> Type Min             </span>┃<span style=\"font-weight: bold\"> Type Max             </span>┃<span style=\"font-weight: bold\"> Value </span>┃<span style=\"font-weight: bold\"> Data                </span>┃\n",
       "┡━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">    Int8(0) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    0     </span>│      1      │ -128                 │ 127                  │ 0     │ b'\\x00'             │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">   Int16(1) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    1     </span>│      2      │ -32768               │ 32767                │ 1     │ b'\\x01\\x00'         │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">   Int32(2) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    2     </span>│      4      │ -2147483648          │ 2147483647           │ 2     │ b'\\x02\\x00\\x00\\x00' │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">   Int64(3) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    3     </span>│      8      │ -9223372036854775808 │ 9223372036854775807  │ 3     │ b'\\x03\\x00\\x00\\x00… │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">   UInt8(4) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    4     </span>│      1      │ 0                    │ 255                  │ 4     │ b'\\x04'             │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">  UInt16(5) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    5     </span>│      2      │ 0                    │ 65535                │ 5     │ b'\\x05\\x00'         │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">  UInt32(6) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    6     </span>│      4      │ 0                    │ 4294967295           │ 6     │ b'\\x06\\x00\\x00\\x00' │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">  UInt64(7) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    7     </span>│      8      │ 0                    │ 18446744073709551615 │ 7     │ b'\\x07\\x00\\x00\\x00… │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">    Long(8) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    8     </span>│      8      │ -9223372036854775808 │ 9223372036854775807  │ 8     │ b'\\x08\\x00\\x00\\x00… │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">   ULong(9) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    9     </span>│      8      │ 0                    │ 18446744073709551615 │ 9     │ b'\\t\\x00\\x00\\x00\\x… │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">  UInt8(10) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    10    </span>│      1      │ 0                    │ 255                  │ 10    │ b'\\n'               │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">   Int8(11) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    11    </span>│      1      │ -128                 │ 127                  │ 11    │ b'\\x0b'             │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">  UInt8(12) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    12    </span>│      1      │ 0                    │ 255                  │ 12    │ b'\\x0c'             │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">  Int16(13) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    13    </span>│      2      │ -32768               │ 32767                │ 13    │ b'\\r\\x00'           │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> UInt16(14) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    14    </span>│      2      │ 0                    │ 65535                │ 14    │ b'\\x0e\\x00'         │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> UInt16(15) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    15    </span>│      2      │ 0                    │ 65535                │ 15    │ b'\\x0f\\x00'         │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">  Int32(16) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    16    </span>│      4      │ -2147483648          │ 2147483647           │ 16    │ b'\\x10\\x00\\x00\\x00' │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> UInt32(17) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    17    </span>│      4      │ 0                    │ 4294967295           │ 17    │ b'\\x11\\x00\\x00\\x00' │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> UInt32(18) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    18    </span>│      4      │ 0                    │ 4294967295           │ 18    │ b'\\x12\\x00\\x00\\x00' │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">  Int64(19) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    19    </span>│      8      │ -9223372036854775808 │ 9223372036854775807  │ 19    │ b'\\x13\\x00\\x00\\x00… │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> UInt64(20) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">    20    </span>│      8      │ 0                    │ 18446744073709551615 │ 20    │ b'\\x14\\x00\\x00\\x00… │\n",
       "└────────────┴──────────┴─────────────┴──────────────────────┴──────────────────────┴───────┴─────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[3m                                                Fixed Size Integers                                                \u001b[0m\n",
       "┏━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1m      Repr\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mVariable\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mType Length\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mType Min            \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mType Max            \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mValue\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mData               \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36m   Int8(0)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   0    \u001b[0m\u001b[35m \u001b[0m│      1      │ -128                 │ 127                  │ 0     │ b'\\x00'             │\n",
       "│\u001b[36m \u001b[0m\u001b[36m  Int16(1)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   1    \u001b[0m\u001b[35m \u001b[0m│      2      │ -32768               │ 32767                │ 1     │ b'\\x01\\x00'         │\n",
       "│\u001b[36m \u001b[0m\u001b[36m  Int32(2)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   2    \u001b[0m\u001b[35m \u001b[0m│      4      │ -2147483648          │ 2147483647           │ 2     │ b'\\x02\\x00\\x00\\x00' │\n",
       "│\u001b[36m \u001b[0m\u001b[36m  Int64(3)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   3    \u001b[0m\u001b[35m \u001b[0m│      8      │ -9223372036854775808 │ 9223372036854775807  │ 3     │ b'\\x03\\x00\\x00\\x00… │\n",
       "│\u001b[36m \u001b[0m\u001b[36m  UInt8(4)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   4    \u001b[0m\u001b[35m \u001b[0m│      1      │ 0                    │ 255                  │ 4     │ b'\\x04'             │\n",
       "│\u001b[36m \u001b[0m\u001b[36m UInt16(5)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   5    \u001b[0m\u001b[35m \u001b[0m│      2      │ 0                    │ 65535                │ 5     │ b'\\x05\\x00'         │\n",
       "│\u001b[36m \u001b[0m\u001b[36m UInt32(6)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   6    \u001b[0m\u001b[35m \u001b[0m│      4      │ 0                    │ 4294967295           │ 6     │ b'\\x06\\x00\\x00\\x00' │\n",
       "│\u001b[36m \u001b[0m\u001b[36m UInt64(7)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   7    \u001b[0m\u001b[35m \u001b[0m│      8      │ 0                    │ 18446744073709551615 │ 7     │ b'\\x07\\x00\\x00\\x00… │\n",
       "│\u001b[36m \u001b[0m\u001b[36m   Long(8)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   8    \u001b[0m\u001b[35m \u001b[0m│      8      │ -9223372036854775808 │ 9223372036854775807  │ 8     │ b'\\x08\\x00\\x00\\x00… │\n",
       "│\u001b[36m \u001b[0m\u001b[36m  ULong(9)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   9    \u001b[0m\u001b[35m \u001b[0m│      8      │ 0                    │ 18446744073709551615 │ 9     │ b'\\t\\x00\\x00\\x00\\x… │\n",
       "│\u001b[36m \u001b[0m\u001b[36m UInt8(10)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   10   \u001b[0m\u001b[35m \u001b[0m│      1      │ 0                    │ 255                  │ 10    │ b'\\n'               │\n",
       "│\u001b[36m \u001b[0m\u001b[36m  Int8(11)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   11   \u001b[0m\u001b[35m \u001b[0m│      1      │ -128                 │ 127                  │ 11    │ b'\\x0b'             │\n",
       "│\u001b[36m \u001b[0m\u001b[36m UInt8(12)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   12   \u001b[0m\u001b[35m \u001b[0m│      1      │ 0                    │ 255                  │ 12    │ b'\\x0c'             │\n",
       "│\u001b[36m \u001b[0m\u001b[36m Int16(13)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   13   \u001b[0m\u001b[35m \u001b[0m│      2      │ -32768               │ 32767                │ 13    │ b'\\r\\x00'           │\n",
       "│\u001b[36m \u001b[0m\u001b[36mUInt16(14)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   14   \u001b[0m\u001b[35m \u001b[0m│      2      │ 0                    │ 65535                │ 14    │ b'\\x0e\\x00'         │\n",
       "│\u001b[36m \u001b[0m\u001b[36mUInt16(15)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   15   \u001b[0m\u001b[35m \u001b[0m│      2      │ 0                    │ 65535                │ 15    │ b'\\x0f\\x00'         │\n",
       "│\u001b[36m \u001b[0m\u001b[36m Int32(16)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   16   \u001b[0m\u001b[35m \u001b[0m│      4      │ -2147483648          │ 2147483647           │ 16    │ b'\\x10\\x00\\x00\\x00' │\n",
       "│\u001b[36m \u001b[0m\u001b[36mUInt32(17)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   17   \u001b[0m\u001b[35m \u001b[0m│      4      │ 0                    │ 4294967295           │ 17    │ b'\\x11\\x00\\x00\\x00' │\n",
       "│\u001b[36m \u001b[0m\u001b[36mUInt32(18)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   18   \u001b[0m\u001b[35m \u001b[0m│      4      │ 0                    │ 4294967295           │ 18    │ b'\\x12\\x00\\x00\\x00' │\n",
       "│\u001b[36m \u001b[0m\u001b[36m Int64(19)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   19   \u001b[0m\u001b[35m \u001b[0m│      8      │ -9223372036854775808 │ 9223372036854775807  │ 19    │ b'\\x13\\x00\\x00\\x00… │\n",
       "│\u001b[36m \u001b[0m\u001b[36mUInt64(20)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m   20   \u001b[0m\u001b[35m \u001b[0m│      8      │ 0                    │ 18446744073709551615 │ 20    │ b'\\x14\\x00\\x00\\x00… │\n",
       "└────────────┴──────────┴─────────────┴──────────────────────┴──────────────────────┴───────┴─────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-style: italic\">                                 Fixed Size Floats                                  </span>\n",
       "┏━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\">         Repr </span>┃<span style=\"font-weight: bold\"> Variable </span>┃<span style=\"font-weight: bold\"> Type Length </span>┃<span style=\"font-weight: bold\"> Value </span>┃<span style=\"font-weight: bold\"> Data                             </span>┃\n",
       "┡━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> Float16(0.0) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">   0.0    </span>│      2      │ 0.0   │ b'\\x00\\x00'                      │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> Float32(1.0) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">   1.0    </span>│      4      │ 1.0   │ b'\\x00\\x00\\x80?'                 │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> Float64(2.0) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">   2.0    </span>│      8      │ 2.0   │ b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00@' │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> Float16(3.0) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">   3.0    </span>│      2      │ 3.0   │ b'\\x00B'                         │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> Float32(4.0) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">   4.0    </span>│      4      │ 4.0   │ b'\\x00\\x00\\x80@'                 │\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> Float64(5.0) </span>│<span style=\"color: #800080; text-decoration-color: #800080\">   5.0    </span>│      8      │ 5.0   │ b'\\x00\\x00\\x00\\x00\\x00\\x00\\x14@' │\n",
       "└──────────────┴──────────┴─────────────┴───────┴──────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[3m                                 Fixed Size Floats                                  \u001b[0m\n",
       "┏━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1m        Repr\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mVariable\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mType Length\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mValue\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mData                            \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36mFloat16(0.0)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m  0.0   \u001b[0m\u001b[35m \u001b[0m│      2      │ 0.0   │ b'\\x00\\x00'                      │\n",
       "│\u001b[36m \u001b[0m\u001b[36mFloat32(1.0)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m  1.0   \u001b[0m\u001b[35m \u001b[0m│      4      │ 1.0   │ b'\\x00\\x00\\x80?'                 │\n",
       "│\u001b[36m \u001b[0m\u001b[36mFloat64(2.0)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m  2.0   \u001b[0m\u001b[35m \u001b[0m│      8      │ 2.0   │ b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00@' │\n",
       "│\u001b[36m \u001b[0m\u001b[36mFloat16(3.0)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m  3.0   \u001b[0m\u001b[35m \u001b[0m│      2      │ 3.0   │ b'\\x00B'                         │\n",
       "│\u001b[36m \u001b[0m\u001b[36mFloat32(4.0)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m  4.0   \u001b[0m\u001b[35m \u001b[0m│      4      │ 4.0   │ b'\\x00\\x00\\x80@'                 │\n",
       "│\u001b[36m \u001b[0m\u001b[36mFloat64(5.0)\u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m  5.0   \u001b[0m\u001b[35m \u001b[0m│      8      │ 5.0   │ b'\\x00\\x00\\x00\\x00\\x00\\x00\\x14@' │\n",
       "└──────────────┴──────────┴─────────────┴───────┴──────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from rich.console import Console\n",
    "from rich.table import Table\n",
    "\n",
    "table = Table(title=\"Fixed Size Integers\")\n",
    "\n",
    "table.add_column(\"Repr\", justify=\"right\", style=\"cyan\", no_wrap=True)\n",
    "table.add_column(\"Variable\", style=\"magenta\", justify=\"center\")\n",
    "table.add_column(\"Type Length\", justify=\"center\")\n",
    "table.add_column(\"Type Min\")\n",
    "table.add_column(\"Type Max\")\n",
    "table.add_column(\"Value\")\n",
    "table.add_column(\"Data\")\n",
    "\n",
    "for var in my_ints:\n",
    "    table.add_row(repr(var), str(var), str(len(var)), str(var.min), str(var.max), str(var.value), str(var.data))\n",
    "\n",
    "console = Console()\n",
    "console.print(table)\n",
    "\n",
    "table = Table(title=\"Fixed Size Floats\")\n",
    "\n",
    "table.add_column(\"Repr\", justify=\"right\", style=\"cyan\", no_wrap=True)\n",
    "table.add_column(\"Variable\", style=\"magenta\", justify=\"center\")\n",
    "table.add_column(\"Type Length\", justify=\"center\")\n",
    "table.add_column(\"Value\")\n",
    "table.add_column(\"Data\")\n",
    "\n",
    "for var in my_floats:\n",
    "    table.add_row(repr(var), str(var), str(len(var)), str(var.value), str(var.data))\n",
    "\n",
    "console = Console()\n",
    "console.print(table)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Numeric byteclasses can be used in math operations just like normal numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3\n"
     ]
    }
   ],
   "source": [
    "print(my_ints[1], my_ints[2], my_ints[1] + my_ints[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2\n"
     ]
    }
   ],
   "source": [
    "print(my_ints[1], my_ints[1] + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2\n"
     ]
    }
   ],
   "source": [
    "print(my_ints[1], 1 + my_ints[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each primitive class has built-in bounds checks and will raise an `OverflowError` or `UnderflowError` as appropriate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OverfowError: value (128) exceeded Int8 max (127)\n",
      "UnderfowError: value (-1) below UInt8 min (0)\n"
     ]
    }
   ],
   "source": [
    "from byteclasses.types.primitives.integers import UnderflowError\n",
    "try:\n",
    "    _ = Int8(128)\n",
    "except OverflowError as err:\n",
    "    print(err)\n",
    "\n",
    "try:\n",
    "    _ = UInt8(-1)\n",
    "except UnderflowError as err:\n",
    "    print(err)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Attaching to external data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bytearray(b'\\x00\\x01\\x02\\x03') 0 0\n"
     ]
    }
   ],
   "source": [
    "my_data = bytearray(b\"\\x00\\x01\\x02\\x03\")\n",
    "mv = memoryview(my_data)\n",
    "my_var1 = Int32()\n",
    "my_var2 = UInt32()\n",
    "print(my_data, my_var1, my_var2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Any byteclass instance can be attached to a memoryview of equal size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bytearray(b'\\x00\\x00\\x00\\x00') 0 0\n"
     ]
    }
   ],
   "source": [
    "my_var1.attach(mv)\n",
    "my_var2.attach(mv)\n",
    "print(my_data, my_var1, my_var2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Changes to data are also represented in any attached byteclass instances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bytearray(b'\\x04\\x05\\x06\\x07') 117835012 117835012\n"
     ]
    }
   ],
   "source": [
    "mv[:] = b\"\\x04\\x05\\x06\\x07\"\n",
    "print(my_data, my_var1, my_var2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Changes to a primitive's value or data attribute are also applied to the attached data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bytearray(b'\\xff\\xff\\xff\\x7f') 2147483647 2147483647\n"
     ]
    }
   ],
   "source": [
    "my_var1.value = my_var1.max\n",
    "print(my_data, my_var1, my_var2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Changes to a primitive's value or data attribute are also applied to the attached data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bytearray(b'\\xff\\xff\\xff\\xff') -1 4294967295\n"
     ]
    }
   ],
   "source": [
    "my_var2.value = my_var2.max\n",
    "print(my_data, my_var1, my_var2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.5 ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "557d07237cea0a23e1b53fe2d85e0da343a1f271fee6abb399e030b4f4b9db4a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
